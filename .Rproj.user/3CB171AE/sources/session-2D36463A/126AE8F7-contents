#install all required packages

#if(!require('devtools')) install.packages('devtools')
#if(!require('tidyverse')) install.packages('tidyverse')
#if(!require('data.table')) install.packages('data.table')
#if(!require('DBI')) install.packages('DBI')
#if(!require('odbc')) install.packages('odbc')
#if(!require('writexl')) install.packages('writexl')


devtools::install_github("PublicHealthEngland/fingertipsR")

if(!require('fingertipsR')) install.packages('fingertipsR')
#https://www.rdocumentation.org/packages/fingertipsR/versions/0.1.1

#create SQL connection

SQLconnection <-dbConnect(odbc(),
                   Driver="SQL Server",
                   Server="MLCSU-BI-SQL",
                   Database="AnalystGlobal",
                   Trusted_Connection="True")

#open SQL query for list of district codes

districtsSQLQuery <- read_file('SQLQueries/SQL_districtCodes.sql')

#read in list of districts

listOfDistricts <-dbGetQuery(SQLconnection,
                             districtsSQLQuery)%>%as_tibble()

#determine profile id

profiles <- profiles(ProfileName = "Public Health Outcomes Framework")

profile <- unique(profiles$ProfileID)

#create empty dataframes for combining data output

worseDF <- data.frame()
betterDF <- data.frame()

#for loop to loop through various districts

for (i in listOfDistricts$LA_UA_Code2){
  
  #read in data
  
 data <- fingertips_data(AreaTypeID = 101 ,AreaCode = i, 
                ProfileID = profile, rank = TRUE) 
 
 #create reference column
 
data <- unite(data, col = 'refColumn', c('IndicatorID','AreaCode','AreaType','Sex','Age','Category'),sep = '|', remove = FALSE)

#create id

data <- transform(data, ID = as.numeric(factor(refColumn)))

#list latest data available by metric

latestValues <- data %>% group_by(ID) %>% summarise(Timeperiod = max(Timeperiod))

#filter out all previous data

latestData <- inner_join(data, latestValues, by = c('ID','Timeperiod'))

#create combined area rank to account for polarity

latestData <- latestData %>% mutate(combinedRank = case_when(Polarity == 'RAG - Low is good' ~ (AreaValuesCount + 1) - Rank, 
                                                    TRUE ~ Rank))

#create DF for indicators where area is worse than comparators

worseData <- latestData %>% filter(ComparedtoEnglandvalueorpercentiles == 'Worse' | ComparedtoRegionvalueorpercentiles == 'Worse')

#arrange worse data

worseData <- worseData %>% arrange(combinedRank)

#add worse data to full DF

worseDF <- rbind(worseDF,worseData)

#create DF for indicators where area is better than comparators

betterData <- latestData %>% filter(ComparedtoEnglandvalueorpercentiles == 'Better' | ComparedtoRegionvalueorpercentiles == 'Better')

#arrange better data

betterData <- betterData %>% arrange(combinedRank)

#add better data to full DF

betterDF <- rbind(betterDF,betterData)

#create dynamic excel naming convention to allow for different excels docs per district

excelName <- str_replace_all(paste('excelOutputs/',unique(data$AreaName),'PHOF.xlsx'),' ','_')

#create word table outputs

source('rScripts/createWorseTableDoc.r')
source('rScripts/createBetterTableDoc.r')
source('rScripts/createCombinedTableDoc.r')

#write district data into excel doc

#write_xlsx(list(WorseIndicators = worseData, BetterIndicators = betterData), excelName)
}



